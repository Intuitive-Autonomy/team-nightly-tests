name: Isaac Sim Nav CI

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'smoke'
        type: choice
        options:
        - smoke
        - all
      repository_ref:
        description: 'Branch/tag/commit to test'
        required: false
        default: 'main'
        type: string

env:
  REPO_NAME: isaac_sim_nav

jobs:
  test-isaac-sim-nav:
    runs-on: self-hosted
    timeout-minutes: 45
    steps:
    - name: Clean workspace and environment
      run: |
        echo "Cleaning workspace for isaac_sim_nav..."
        rm -rf ${{ env.REPO_NAME }} || true
        docker system prune -f || true
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

    - name: Clone repository
      run: |
        echo "Cloning ${{ env.REPO_NAME }} at ref: ${{ github.event.inputs.repository_ref || 'main' }}"
        git clone https://github.com/${{ github.repository_owner }}/${{ env.REPO_NAME }}.git
        cd ${{ env.REPO_NAME }}
        git checkout ${{ github.event.inputs.repository_ref || 'main' }}
        echo "Current commit:"
        git log --oneline -1

    - name: Detect build system
      id: detect_build
      working-directory: ./${{ env.REPO_NAME }}
      run: |
        echo "Detecting build system for isaac_sim_nav..."

        if [[ -f "Dockerfile" ]]; then
          echo "build_system=docker" >> $GITHUB_OUTPUT
          echo "Found Dockerfile"
        elif [[ -f "requirements.txt" ]]; then
          echo "build_system=python" >> $GITHUB_OUTPUT
          echo "Found Python requirements.txt"
        elif [[ -f "package.xml" ]]; then
          echo "build_system=ros" >> $GITHUB_OUTPUT
          echo "Found ROS package.xml"
        elif [[ -f "CMakeLists.txt" ]]; then
          echo "build_system=cmake" >> $GITHUB_OUTPUT
          echo "Found CMakeLists.txt"
        else
          echo "build_system=generic" >> $GITHUB_OUTPUT
          echo "No specific build system detected, using generic approach"
        fi

        # Show repository structure
        echo "Repository structure:"
        find . -maxdepth 2 -type f -name "*.py" -o -name "*.cpp" -o -name "*.hpp" -o -name "*.launch*" -o -name "*.yaml" -o -name "*.yml" | head -20

    - name: Build Docker environment
      if: steps.detect_build.outputs.build_system == 'docker'
      working-directory: ./${{ env.REPO_NAME }}
      run: |
        echo "Building Docker test environment..."
        docker build -t ${{ env.REPO_NAME }}-test .

    - name: Setup Python environment
      if: steps.detect_build.outputs.build_system == 'python'
      working-directory: ./${{ env.REPO_NAME }}
      run: |
        echo "Setting up Python environment..."
        docker run --rm \
          -v $(pwd):/workspace \
          -w /workspace \
          python:3.8-slim \
          bash -c "
            apt-get update && apt-get install -y git &&
            pip install --upgrade pip &&
            pip install -r requirements.txt
          " > setup.log 2>&1
        echo "Python environment setup complete"

    - name: Setup ROS environment
      if: steps.detect_build.outputs.build_system == 'ros'
      working-directory: ./${{ env.REPO_NAME }}
      run: |
        echo "Setting up ROS environment..."
        # Use a ROS Docker image for testing
        docker pull osrf/ros:humble-desktop
        echo "ROS environment ready"

    - name: Run smoke tests
      if: github.event.inputs.test_type == 'smoke' || github.event.inputs.test_type == ''
      working-directory: ./${{ env.REPO_NAME }}
      run: |
        echo "Running smoke tests for isaac_sim_nav..."

        case "${{ steps.detect_build.outputs.build_system }}" in
          "docker")
            docker run --rm \
              --memory=2g \
              --cpus=2 \
              -v $(pwd):/workspace \
              ${{ env.REPO_NAME }}-test \
              bash -c "
                echo 'Running basic validation...' &&
                python -c 'import sys; print(f\"Python version: {sys.version}\")' &&
                find /workspace -name '*.py' -exec python -m py_compile {} \;
              "
            ;;
          "python")
            docker run --rm \
              -v $(pwd):/workspace \
              -w /workspace \
              python:3.8-slim \
              bash -c "
                pip install -r requirements.txt &&
                echo 'Running Python smoke tests...' &&
                python -c 'import sys; print(f\"Python version: {sys.version}\")' &&
                find . -name '*.py' -exec python -m py_compile {} \;
              "
            ;;
          "ros")
            docker run --rm \
              -v $(pwd):/workspace \
              -w /workspace \
              osrf/ros:humble-desktop \
              bash -c "
                source /opt/ros/humble/setup.bash &&
                echo 'Running ROS smoke tests...' &&
                colcon build --packages-select-by-dep isaac_sim_nav || echo 'Build attempted'
              "
            ;;
          *)
            echo "Running generic smoke tests..."
            find . -name "*.py" -exec python3 -m py_compile {} \; || echo "Python compilation check completed"
            ls -la
            ;;
        esac

    - name: Run comprehensive tests
      if: github.event.inputs.test_type == 'all'
      working-directory: ./${{ env.REPO_NAME }}
      run: |
        echo "Running comprehensive tests for isaac_sim_nav..."

        case "${{ steps.detect_build.outputs.build_system }}" in
          "docker")
            docker run --rm \
              --memory=4g \
              --cpus=2 \
              -v $(pwd):/workspace \
              ${{ env.REPO_NAME }}-test \
              bash -c "
                echo 'Running comprehensive tests...' &&
                if [[ -f 'run_tests.sh' ]]; then
                  chmod +x run_tests.sh && ./run_tests.sh all
                else
                  pytest tests/ || python -m unittest discover tests/ || echo 'No standard test framework found'
                fi
              "
            ;;
          "python")
            docker run --rm \
              -v $(pwd):/workspace \
              -w /workspace \
              python:3.8-slim \
              bash -c "
                pip install -r requirements.txt &&
                pip install pytest flake8 ||
                echo 'Running comprehensive Python tests...' &&
                pytest tests/ || python -m unittest discover tests/ || echo 'No tests found' &&
                flake8 . --max-line-length=100 || echo 'Linting completed'
              "
            ;;
          "ros")
            docker run --rm \
              -v $(pwd):/workspace \
              -w /workspace \
              osrf/ros:humble-desktop \
              bash -c "
                source /opt/ros/humble/setup.bash &&
                echo 'Running comprehensive ROS tests...' &&
                colcon build &&
                colcon test || echo 'Tests completed'
              "
            ;;
          *)
            echo "Running available tests..."
            if [[ -f "run_tests.sh" ]]; then
              chmod +x run_tests.sh && ./run_tests.sh || echo "Test script executed"
            else
              echo "No specific test runner found"
            fi
            ;;
        esac

    - name: Generate test artifacts
      if: always()
      working-directory: ./${{ env.REPO_NAME }}
      run: |
        echo "Generating test artifacts..."
        mkdir -p ../test-results

        # Collect any test output files
        find . -name "*.log" -o -name "test_*.xml" -o -name "coverage.xml" -o -name "*.pytest_cache" | while read file; do
          cp -r "$file" "../test-results/" 2>/dev/null || true
        done

        # Generate test report
        echo "# ${{ env.REPO_NAME }} Test Results" > ../test-results/summary.md
        echo "- **Test Type:** ${{ github.event.inputs.test_type || 'smoke' }}" >> ../test-results/summary.md
        echo "- **Repository Ref:** ${{ github.event.inputs.repository_ref || 'main' }}" >> ../test-results/summary.md
        echo "- **Build System:** ${{ steps.detect_build.outputs.build_system }}" >> ../test-results/summary.md
        echo "- **Timestamp:** $(date -u)" >> ../test-results/summary.md
        echo "- **Runner:** self-hosted" >> ../test-results/summary.md

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.REPO_NAME }}-test-results
        path: test-results/
        retention-days: 7

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up..."
        rm -rf ${{ env.REPO_NAME }} || true
        docker rmi ${{ env.REPO_NAME }}-test || true
        rm -rf test-results || true
        docker system prune -f || true